buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.novoda:bintray-release:0.3.4'
        // clean build bintrayUpload
    }
}

ext {
    COMPILE_SDK = 23
    BUILD_TOOLS = '23.0.2'
    VERSION_NAME = version()
    VERSION_CODE = versionCode().toInteger()
    USER_ORG = 'blipinsk'
    GROUP_ID = 'com.bartoszlipinski'
    DESC = 'The easiest way to simplify custom View tags in Android layout xmls.'
    WEBSITE = 'https://github.com/blipinsk/XmlTag'
    GIT_URL = 'https://github.com/blipinsk/XmlTag.git'
    ARTIFACT_LIBRARY = 'xmltag'
    ARTIFACT_COMPILER = 'xmltag-compiler'
    ARTIFACT_ANNOTATIONS = 'xmltag-annotations'

    userOrg = USER_ORG
    groupId = GROUP_ID
    uploadName = 'XmlTag'
    description = DESC
    publishVersion = VERSION_NAME
    website = WEBSITE
    licences = ['Apache-2.0']
    dryRun = 'false'
    bintrayUser = BINTRAY_USERNAME
    bintrayKey = BINTRAY_API_KEY
    IS_UPLOADING = project.getGradle().startParameter.taskNames.any { it.contains('bintrayUpload') }
}

subprojects {
    repositories {
        jcenter()
    }

    group = GROUP_ID
    version = VERSION_NAME

    if (IS_UPLOADING && project.name in [ARTIFACT_LIBRARY, ARTIFACT_COMPILER, ARTIFACT_ANNOTATIONS]) {
        println project.name
        apply plugin: 'maven'

        gradle.taskGraph.whenReady { taskGraph ->
            taskGraph.getAllTasks().find {
                it.path == ":$project.name:generatePomFileForMavenPublication"
            }.doLast {
                file("build/publications/maven/pom-default.xml").delete()
                pom {
                    //noinspection GroovyAssignabilityCheck
                    project {
                        name project.name
                        artifactId project.name
                        packaging project.name == ARTIFACT_COMPILER || project.name == ARTIFACT_ANNOTATIONS ? 'jar' : 'aar'
                        description DESC
                        url WEBSITE
                        version VERSION_NAME

                        scm {
                            url GIT_URL
                            connection GIT_URL
                            developerConnection GIT_URL
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                            }
                        }

                        developers {
                            developer {
                                id USER_ORG
                                name 'Bartosz Lipinski'
                                email 'bartoszlipinski90@gmail.com'
                            }
                        }
                    }
                }.writeTo("build/publications/maven/pom-default.xml")
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task bumpMajor << {
    ant.propertyfile(file: 'version.properties') {
        entry(key: 'major', type: 'int', operation: '+', value: 1)
        entry(key: 'minor', type: 'int', operation: '=', value: 0)
        entry(key: 'patch', type: 'int', operation: '=', value: 0)
        entry(key: 'code', type: 'int', operation: '+', value: 1)
    }
}

task bumpMinor << {
    ant.propertyfile(file: 'version.properties') {
        entry(key: 'minor', type: 'int', operation: '+', value: 1)
        entry(key: 'patch', type: 'int', operation: '=', value: 0)
        entry(key: 'code', type: 'int', operation: '+', value: 1)
    }
}

task bumpPatch << {
    ant.propertyfile(file: 'version.properties') {
        entry(key: 'patch', type: 'int', operation: '+', value: 1)
        entry(key: 'code', type: 'int', operation: '+', value: 1)
    }
}

task genReadMe << {
    def template = file('README.md.template').text
    def result = template.replaceAll("%%version%%", version())
    file("README.md").withWriter { it << result }
}

task version << {
    println version()
}

def String version() {
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    return versionProps['major'] + "." + versionProps['minor'] + "." + versionProps['patch']
}

def String versionCode() {
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    return versionProps['code']
}